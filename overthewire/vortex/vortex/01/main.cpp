#include <iostream>
#include <vector>
// c headers, linux networking is basically all c
#include <stdio.h>
#include <time.h>
#include <cstring>

#include <netdb.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#define HOST "vortex.labs.overthewire.org"
#define PORT 5842

// NOT WORKING YET
// MUST DO THIS :)

int sockfd;
/*
    struct sockaddr_in {
        short int sin_family;
        unsigned short int sin_port;
        struct in_addr sin_addr;
        unsigned char sin_zero[8];
    };
*/

int resolveHost(const char* host, char ip[]) {
    // init important structures for dns resolution
    struct hostent *hostinfo;
    struct in_addr **addr_list;
    // call gethostbyname
    hostinfo = gethostbyname(host); // type cast hostinfo to type struct in_addr, same as addr_list
    addr_list = (struct in_addr**)hostinfo->h_addr_list;
        // hostinfo->h_addr_list means to retrieve pointer to member of struct
    for(int i = 0; addr_list[i] != NULL; i++) {
        //Return the first one;
        strcpy(ip , inet_ntoa(*addr_list[i]) );
        return 0;
	}
    return 1;
}

void socketConnect(const char* host, int port) {
    char ip[20];
    resolveHost(host, ip);

    int sock = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons(port); // i dont know if htons(); will be needed
    addr.sin_addr.s_addr = inet_addr(ip);

    std::cout<<"HOST: "<<host<<"\nPORT: "<<port<<std::endl;

    if ( connect(sock, (struct sockaddr*)&addr, sizeof(addr)) <0) {
        std::cout<<"Eror Connecting to Remote Server!\n";
    }
    // init recv and final data
    unsigned int sum = 0, buf;

    for (int i = 0; i < 4; i++) {
        recv(sock, &buf, 4, 0);
        sum += buf;
    }
    printf("DATA: %u", sum); // unsigned int fmt string, cout maybe works?

    if (send(sock, &sum, sizeof(sum), 0) < 0) {
        std::cout<<"Could not send data!\n";
    } else {
        std::cout<<"Data Sent!"<<std::endl;
        char recvdata[1024];
        recv(sock, recvdata, sizeof(recvdata), 0);
        std::cout<<recvdata<<std::endl;
    }
}

int main(int argc, char**argv) {
    socketConnect(HOST, PORT);
    return 0;
}
